"""Augment decile threshold summary with trade counts retained.

Reads step_c_decile_thresholds_summary.csv (generated by step_c_extended_analysis.py) and
adds an estimated TradesRetained column recovered by re-loading per-asset files.

Counts are based on filtering Î”Std_1_2 > 0 then applying keep-percent selection.

Run:
  python src/research/augment_decile_thresholds_with_counts.py
"""
from __future__ import annotations

import json
from pathlib import Path
import pandas as pd
import numpy as np

PROJECT_ROOT = Path(__file__).resolve().parent.parent.parent
ASSETS = ["GBPUSD","EURUSD","USDCHF"]
INPUT_TEMPLATE = "ema_crossover_analysis_{sym}.csv"
SUMMARY_FILE = PROJECT_ROOT / 'step_c_decile_thresholds_summary.csv'
OUTPUT_FILE = PROJECT_ROOT / 'step_c_decile_thresholds_summary_counts.csv'


def load_asset(sym: str) -> pd.DataFrame:
    df = pd.read_csv(PROJECT_ROOT / INPUT_TEMPLATE.format(sym=sym))
    try:
        def j(v):
            try:
                return json.loads(v) if isinstance(v,str) else (v if isinstance(v,list) else [])
            except Exception:
                return []
        if 'DeltaStd_1_2' not in df.columns:
            df['Post_Std_List'] = df['Post_Std_Series'].apply(j)
            df['DeltaStd_1_2'] = df['Post_Std_List'].apply(lambda lst: lst[1]-lst[0] if len(lst)>=2 else np.nan)
    except Exception:
        pass
    return df


def compute_counts():
    if not SUMMARY_FILE.exists():
        raise SystemExit('Summary file not found. Run step_c_extended_analysis.py first.')
    summary = pd.read_csv(SUMMARY_FILE)
    rows = []
    for sym in ASSETS:
        df = load_asset(sym)
        pos = df[df['DeltaStd_1_2']>0].copy()
        total_pos = len(pos)
        if total_pos == 0:
            continue
        pos = pos.sort_values('DeltaStd_1_2', ascending=False)
        for pct in sorted(summary.loc[summary.Symbol==sym,'KeepPercent'].unique()):
            keep_n = int(np.ceil(total_pos * pct/100.0))
            keep_n = max(1, min(keep_n, total_pos))
            rows.append(dict(Symbol=sym, KeepPercent=pct, TradesRetained=keep_n, TotalPositive=total_pos))
    counts = pd.DataFrame(rows)
    merged = summary.merge(counts, on=['Symbol','KeepPercent'], how='left')
    merged.to_csv(OUTPUT_FILE, index=False)
    print('Augmented summary written:', OUTPUT_FILE.name)
    # Quick pivot for inspection
    print('\nTrades Retained (Top % Filter):')
    print(merged.pivot(index='KeepPercent', columns='Symbol', values='TradesRetained').to_string())

if __name__ == '__main__':  # pragma: no cover
    compute_counts()
